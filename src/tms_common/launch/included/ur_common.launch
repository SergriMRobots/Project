<?xml version="1.0"?>
<launch>
  <arg name="controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="robot_ip" doc="IP address by which the robot can be reached."/>
  <arg name="reverse_ip" default="" doc="IP of the driver, if set to empty it will detect it automatically."/>
  <arg name="reverse_port" default="50001" doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller."/>
  <arg name="script_sender_port" default="50002" doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately."/>
  <arg name="trajectory_port" default="50003" doc="Port that will be opened by the driver to allow trajectory forwarding."/>
  <arg name="kinematics_config" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="controllers" default="joint_state_controller scaled_pos_joint_traj_controller speed_scaling_state_controller force_torque_sensor_controller robot_status_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="pos_joint_traj_controller joint_group_vel_controller" doc="Controllers that are initally loaded, but not started."/>
  <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>

  <!-- Convert joint states to /tf tranforms -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <node name="ur_hardware_interface" pkg="ur_robot_driver" type="ur_robot_driver_node" output="screen" required="true">
    <param name="robot_ip" type="str" value="$(arg robot_ip)"/>
    <param name="reverse_ip" value="$(arg reverse_ip)"/>
    <param name="reverse_port" type="int" value="$(arg reverse_port)"/>
    <param name="script_sender_port" type="int" value="$(arg script_sender_port)"/>
    <param name="trajectory_port" value="$(arg trajectory_port)"/>
    <rosparam command="load" file="$(arg kinematics_config)" />
    <param name="script_file" value="$(find ur_client_library)/resources/external_control.urscript"/>
    <param name="output_recipe_file" value="$(find ur_robot_driver)/resources/rtde_output_recipe.txt"/>
    <param name="input_recipe_file" value="$(find ur_robot_driver)/resources/rtde_input_recipe.txt"/>
    <param name="headless_mode" value="$(arg headless_mode)"/>
    <param name="tf_prefix" value="$(arg tf_prefix)"/>
    <param name="use_tool_communication" value="false"/>
    <param name="tool_voltage" value="0"/>
    <param name="tool_parity" value="0"/>
    <param name="tool_baud_rate" value="115200"/>
    <param name="tool_stop_bits" value="1"/>
    <param name="tool_rx_idle_chars" value="1.5"/>
    <param name="tool_tx_idle_chars" value="3.5"/>
    <param name="servoj_gain" value="2000"/>
    <param name="servoj_lookahead_time" value="0.03"/>
  </node>
  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="$(arg controllers)" />
  <!-- load other controller -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="--stopped $(arg stopped_controllers)" />
  <node name="controller_stopper" pkg="controller_stopper" type="node" respawn="false" output="screen">
    <remap from="robot_running" to="ur_hardware_interface/robot_program_running"/>
  </node>
  <node ns="ur_hardware_interface" name="ur_robot_state_helper" pkg="ur_robot_driver" type="robot_state_helper" respawn="false" output="screen"/>
</launch>
